{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","name","email","react_default","a","createElement","className","src","alt","CardList","robotList","robots","map","robot","index","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","console","log","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1095a68e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email})=>{\r\n    return(\r\n        <div className=\"b--green br3 bg-light-green dib ma2 pa3 shadow-hover grow\">\r\n            <img src={\"https://robohash.org/\"+id} alt=\"\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots})=>{\r\n    const robotList = robots.map((robot, index)=>{\r\n        return(\r\n            <Card\r\n                key={index}\r\n                email={robot.email}\r\n                id={robot.id}\r\n                name={robot.name}\r\n            />\r\n        )\r\n    });\r\n    return(\r\n        <div>\r\n            {robotList}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Server Error</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from 'react';\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport {connect} from 'react-redux'\r\nimport {setSearchField, requestRobots} from \"../actions\";\r\n\r\nconst mapStateToProps = state =>{\r\n    console.log('4 [Store]');\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => {\r\n            console.log('1. [Event]', event);\r\n            return dispatch(setSearchField(event.target.value));\r\n        },\r\n        onRequestRobots: ()=> dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots =  robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n\r\n        console.log('filteredRobots', filteredRobots.length);\r\n\r\n        if(isPending){\r\n            return <h1>Loading</h1>\r\n        }else{\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1>Robos Friends</h1>\r\n                    <SearchBox\r\n                        searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n    console.log('2. [Action]', text);\r\n    return {\r\n     type: CHANGE_SEARCH_FIELD,\r\n     payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = ()=> (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    console.log('3. [Reducer]');\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            console.log('3.5.1 [Reducer]');\r\n            // return Object.assign({}, state, {searchField: action.payload} );\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            console.log('3.5.2 [Reducer]');\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots , action={}) =>{\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true}\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from \"./containers/App\";\r\nimport {Provider, connect} from 'react-redux';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {searchRobots, requestRobots} from \"./reducers\";\r\nimport {createLogger, } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer,  applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}